<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace는 Mapper의 위치 -->
<mapper namespace="com.site.order.OrderMapper">
   <insert id="insertOrderInfo">
      insert into ordered
      values(1,'N','1',sysdate,#{recipient},#{sender},'A',#{cartId},#{deliveryArea}, '')
   </insert>
   <!-- 결제완료시 cart테이블 status변경 -->
   <update id="updateCartStatus">
      update cart
      set status ='Y'
      where id=#{cartId}
   </update>
   <!-- product테이블의 Quantity(cart의 수량만큼 -1) -->
   <update id="updateProductQuantity">
      update (
          select p.quantity,
                 c.amount
          from product p, cart c
          where p.id = c.product_id and
                c.id = #{cartId})

          SET quantity=quantity-amount
   </update>
   <!-- member mypage 주문리스트 출력 -->
   <select id="findOrderListToMember" resultType="com.site.vo.OrderVo">
      select o.*,
             p.picture,
             p.name,
             p.id as product_id,
             p.price*c.amount as price,
             c.amount,
             to_char(o.order_date,'YYYY-MM-DD') as orderdate
      from ordered o,cart c, product p
      where o.cart_id=c.id and
            c.product_id=p.id and
            c.member_id=#{id}
   </select>
   
   <select id="selectStoreOrderList" resultType="com.site.vo.OrderVo">
      select o.*,
             p.picture,
             p.name,
             p.id as product_id,
             p.price*c.amount as price,
             c.amount,
             to_char(o.order_date,'YYYY-MM-DD') as orderdate
      from ordered o,cart c, product p, store s
      where o.cart_id=c.id and
            c.product_id=p.id and
            p.store_id=s.id and
            s.id=#{id}
   </select>
   
   <update id="updateStatusDeliveryNum">
      update ordered
      set status='2',delivery_num=#{deliveryNum}
      where id=#{id}
   </update>
   
   <update id="updateStatus6FinalBuy">
      update ordered
      set status='6'
      where id=#{id}
   </update>
   
   <!-- 리뷰 시작 -->
   
   <!-- 리뷰 글 저장 -->
   <insert id="insertReviewInfo">
      insert into review
      values(0,#{memberId},#{productId},#{rate},#{about},sysdate)
   </insert>
   
   <!-- 리뷰 사진 저장 -->
   <insert id="insertReviewPicture">
      <selectKey resultType="int" keyProperty="review_id" order="BEFORE">
           select LAST_NUMBER-1 as id
           from USER_SEQUENCES
           where SEQUENCE_NAME = 'REVIEW_SEQ'
       </selectKey>
      insert into reviewpicture values(#{reviewId},#{safeFile})
   </insert>
   
   <!-- 별점 4개이상 리스트 출력 -->
   <select id="findTop3ReviewList" resultType="com.site.vo.ReviewVo">
      <![CDATA[
         select *
         from (select r.*,
                      p.name
               from review r, product p
               where r.rate>=4 and
                     r.product_id=p.id
               order by r.rate)
         where rownum <= 3
      ]]>
   </select>
   
   <!-- 랜덤 변수의 사진 한개 들고오기 -->
   <select id="findTop3ReviewPicture" resultType="String">
      <![CDATA[
         select name
         from reviewpicture
         where rownum=1 and
               review_id=#{id}
      ]]>
   </select>
   
   <delete id="refundDelete">
      delete ordered where id=#{id}
   </delete>
   
   <update id="refundUpdate">
      update ordered set refund_flag='Y'
   </update>
   
</mapper>